1. C언어에서 발생할 수 있는 오류의 종류에 대해 설명하세요. (10점)
솔루션 빌드를 하면 오류가 뜨는데, 대소문자와 띄어쓰기를 구별하기 때문에 유의해야 한다.
마지막에 ;이 사용되지 않는 경우에도 에러가 뜬다.
오류를 심각성의 정도에 따라 분류하면 에러와 경고로 나눌 수 있다.
에러란 컴파일, 링크가 불가능한 심각한 오류이고, 경고란 컴파일, 링크는 가능하고 실행도 가능하나 잠재적인 문제를 일으킬 수 있는 경미한 오류이다.
컴파일 시간 오류는 대부분 문법적인 오류를 의미하고, 논리오류는 논리적으로 잘못되어서 결과가 의도했던 대로 나오지 않는 것을 의미하고,
실행시간 오류는 실행되는 도중에 발생하는 오류를 의미한다.

2. 변수의 종류와 자료형에 대해 설명하세요. (10점)
변수란 프로그램에서 값들이 저장되는 공간을 의미하는데, 정수형 변수, 부동소수점형 변수, 문자형 변수로 나눌 수 있다.
자료형이란 처리할 데이터의 타입(종류)라고 할 수 있는데, 데이터의 종류는 크게 정수형, 실수형, 문자형으로 나뉜다.
정수형에는 short, int, long, long long,unsigned, 부동소수점형에는 float, double, long double,  문자형에는 char 타입이 있다.
각 자료형에는 크기(바이트 수)가 정해져 있는데 이 범위를 초과하면 오버플로우가 발생한다. 따라서 최적의 효과를 내기 위해 다양한 자료형을 사용한다.



3. 다음 수식을 실행한 결과 x의 값과 각 값의 이유를 간략히 설명하세요. (10점)
   1) int x;
   	x = (2+4, 2+9);

    결과 x의 값은 11이다. 2+4의 값은 담지 않고 2+9의 값만 x에 담는다.
    괄호 연산자는 가장 우선순위가 가장 높다. 우선 순위는 콤마<대입<논리<관계<산술<단항 순이다.

   2) int x;
   	x = 2+4, 2+9;
   결과 x의 값은 6이다. 2+4의 값을 먼저 담아버린다.

4. 다음 코드가 실행된 경우 최종값과 각 값의 이유를 간략히 설명하세요.(10점)
   1) int x=10;
	if (x++ >= 10)
		printf("합격");
	else
		printf("불합격");

   최종값은 합격이다.
   x++ : 수식의 값은 증가되지 않은 원래의 x값이다.
   원래의 x값 역시 10이기 때문에 합격이다.

   2) int x=10;
	if (++x >= 10)
		printf("합격");
	else
		printf("불합격");
   최종값은 합격이다.
   ++x : 수식의 값은 증가된 x값이다.
   증가된 x값은 11이기 때문에 if문을 만족하여 합격이다.

5. 아래 소스코드의 실행 결과값을 제출하고, 이 소스를 중첩 do-while문으로 변경하세요.(30점)

	int x,y;
	for (x=1;x<10;x+=2){
		for (y=10;y>1;y-=2)
			printf("%d * %d = %d, ",x,y,x*y);
		printf("\n");
	}


 5-1. 실행 결과값 : 
1 * 10 = 10, 1 * 8 = 8, 1 * 6 = 6, 1 * 4 = 4, 1 * 2 = 2,
3 * 10 = 30, 3 * 8 = 24, 3 * 6 = 18, 3 * 4 = 12, 3 * 2 = 6,
5 * 10 = 50, 5 * 8 = 40, 5 * 6 = 30, 5 * 4 = 20, 5 * 2 = 10,
7 * 10 = 70, 7 * 8 = 56, 7 * 6 = 42, 7 * 4 = 28, 7 * 2 = 14,
9 * 10 = 90, 9 * 8 = 72, 9 * 6 = 54, 9 * 4 = 36, 9 * 2 = 18,

 5-2. 중첩 do-while문으로 변경 
#include<stdio.h>

int main(void)
{
	int x = 1;
	int y = 10;
	do {
		y = 10;
		do {
			printf("%d * %d = %d, ", x, y, x * y);
			y = y - 2;
		} while (y > 1);  //y에 대한 do-while문

		printf("\n");  //줄바꿈
		x = x + 2;

	} while (x < 10);  //x에 대한 do-while문
	


	return 0;

}
  
6. 아래 소스코드의 오류를 정정한 후 실행 결과값을 제출하고, 이 소스를 중첩 while문(do-while문 아님)으로 변경하세요.(30점)

	int x,y;
	int a[5][5] = {{10,8,6,4,2},{30,24,18,12,6},{50,40,30,20,10},{70,56,42,28,14},{90,72,54,36,18}};
	for (x=0;x<5;x++){
		for (y=0;y<5;y++)
			printf("a[%d][%d] = %d, ",x,y,a[i][j]);
		printf("\n");
	}

  6-1. i와 j의 값이 선언되지 않았기 때문에 오류가 발생하였다.
	int x,y;
	int a[5][5] = {{10,8,6,4,2},{30,24,18,12,6},{50,40,30,20,10},{70,56,42,28,14},{90,72,54,36,18}};
	for (x=0;x<5;x++){
		for (y=0;y<5;y++)
			printf("a[%d][%d] = %d, ",x,y,a[x][y]);
		printf("\n");
	}

  6-2. 실행 결과값
a[0][0] = 10, a[0][1] = 8, a[0][2] = 6, a[0][3] = 4, a[0][4] = 2,
a[1][0] = 30, a[1][1] = 24, a[1][2] = 18, a[1][3] = 12, a[1][4] = 6,
a[2][0] = 50, a[2][1] = 40, a[2][2] = 30, a[2][3] = 20, a[2][4] = 10,
a[3][0] = 70, a[3][1] = 56, a[3][2] = 42, a[3][3] = 28, a[3][4] = 14,
a[4][0] = 90, a[4][1] = 72, a[4][2] = 54, a[4][3] = 36, a[4][4] = 18,

  6-3. 중첩 while문으로 변경
#include<stdio.h>

int main(void)
{
	int x, y;
	int a[5][5] = { {10,8,6,4,2},{30,24,18,12,6},{50,40,30,20,10},{70,56,42,28,14},{90,72,54,36,18} };  //배열 선언
	x = 0;
	while(x<5){
		y = 0;
		while (y < 5) {
			printf("a[%d][%d] = %d, ", x, y, a[x][y]);
			y++;
		}
		printf("\n");
		x++;
	}

}

